import { reactive, ref, computed, createVNode } from "vue";
// Utils
import { createNamespace } from '../utils';
import { BORDER_BOTTOM } from '../utils/constant';
import { INDEX_BAR_KEY } from '../index-bar'; // Composition

import { useParent } from '@vant/use';
import { useHeight } from '../composition/use-height';
import { useExpose } from '../composition/use-expose';

var _createNamespace = createNamespace('index-anchor'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

export default createComponent({
  props: {
    index: [Number, String]
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var state = reactive({
      top: 0,
      left: null,
      width: null,
      active: false
    });
    var root = ref();
    var height = useHeight(root);

    var _useParent = useParent(INDEX_BAR_KEY),
        parent = _useParent.parent;

    var isSticky = function isSticky() {
      return state.active && parent.props.sticky;
    };

    var anchorStyle = computed(function () {
      var _parent$props = parent.props,
          zIndex = _parent$props.zIndex,
          highlightColor = _parent$props.highlightColor;

      if (isSticky()) {
        return {
          zIndex: "" + zIndex,
          left: state.left ? state.left + "px" : null,
          width: state.width ? state.width + "px" : null,
          transform: state.top ? "translate3d(0, " + state.top + "px, 0)" : null,
          color: highlightColor
        };
      }
    });
    useExpose({
      state: state,
      height: height
    });
    return function () {
      var _ref2;

      var sticky = isSticky();
      return createVNode("div", {
        "ref": root,
        "style": {
          height: sticky ? height.value + "px" : null
        }
      }, [createVNode("div", {
        "style": anchorStyle.value,
        "class": [bem({
          sticky: sticky
        }), (_ref2 = {}, _ref2[BORDER_BOTTOM] = sticky, _ref2)]
      }, [slots.default ? slots.default() : props.index])]);
    };
  }
});