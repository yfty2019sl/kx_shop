"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCountDown = void 0;
var vue_1 = require("vue");
var utils_1 = require("../utils");
var SECOND = 1000;
var MINUTE = 60 * SECOND;
var HOUR = 60 * MINUTE;
var DAY = 24 * HOUR;
function parseTime(time) {
    var days = Math.floor(time / DAY);
    var hours = Math.floor((time % DAY) / HOUR);
    var minutes = Math.floor((time % HOUR) / MINUTE);
    var seconds = Math.floor((time % MINUTE) / SECOND);
    var milliseconds = Math.floor(time % SECOND);
    return {
        total: time,
        days: days,
        hours: hours,
        minutes: minutes,
        seconds: seconds,
        milliseconds: milliseconds,
    };
}
function isSameSecond(time1, time2) {
    return Math.floor(time1 / 1000) === Math.floor(time2 / 1000);
}
function useCountDown(options) {
    var rafId;
    var endTime;
    var counting;
    var deactivated;
    var remain = vue_1.ref(options.time);
    var current = vue_1.computed(function () { return parseTime(remain.value); });
    var pause = function () {
        counting = false;
        utils_1.cancelRaf(rafId);
    };
    var getCurrentRemain = function () { return Math.max(endTime - Date.now(), 0); };
    var setRemain = function (value) {
        var _a, _b;
        remain.value = value;
        (_a = options.onChange) === null || _a === void 0 ? void 0 : _a.call(options, current.value);
        if (value === 0) {
            pause();
            (_b = options.onFinish) === null || _b === void 0 ? void 0 : _b.call(options);
        }
    };
    var microTick = function () {
        rafId = utils_1.raf(function () {
            // in case of call reset immediately after finish
            if (counting) {
                setRemain(getCurrentRemain());
                if (remain.value > 0) {
                    microTick();
                }
            }
        });
    };
    var macroTick = function () {
        rafId = utils_1.raf(function () {
            // in case of call reset immediately after finish
            if (counting) {
                var remainRemain = getCurrentRemain();
                if (!isSameSecond(remainRemain, remain.value) || remainRemain === 0) {
                    setRemain(remainRemain);
                }
                if (remain.value > 0) {
                    macroTick();
                }
            }
        });
    };
    var tick = function () {
        if (options.millisecond) {
            microTick();
        }
        else {
            macroTick();
        }
    };
    var start = function () {
        if (!counting) {
            endTime = Date.now() + remain.value;
            counting = true;
            tick();
        }
    };
    var reset = function (totalTime) {
        if (totalTime === void 0) { totalTime = options.time; }
        pause();
        remain.value = totalTime;
    };
    vue_1.onBeforeUnmount(pause);
    vue_1.onActivated(function () {
        if (deactivated) {
            counting = true;
            deactivated = false;
            tick();
        }
    });
    vue_1.onDeactivated(function () {
        if (counting) {
            pause();
            deactivated = true;
        }
    });
    return {
        start: start,
        pause: pause,
        reset: reset,
        current: current,
    };
}
exports.useCountDown = useCountDown;
