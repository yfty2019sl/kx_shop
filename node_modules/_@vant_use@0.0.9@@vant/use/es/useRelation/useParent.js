var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { inject, computed, onUnmounted, getCurrentInstance, } from 'vue';
export function useParent(key) {
    var parent = inject(key, null);
    if (parent) {
        var instance_1 = getCurrentInstance();
        if (instance_1) {
            var link = parent.link, unlink_1 = parent.unlink, internalChildren_1 = parent.internalChildren, rest = __rest(parent, ["link", "unlink", "internalChildren"]);
            link(instance_1);
            onUnmounted(function () {
                unlink_1(instance_1);
            });
            var index = computed(function () { return internalChildren_1.indexOf(instance_1); });
            return {
                parent: rest,
                index: index,
            };
        }
    }
    return {};
}
