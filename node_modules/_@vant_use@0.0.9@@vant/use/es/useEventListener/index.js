import { unref, onMounted, onActivated, onUnmounted, onDeactivated, } from 'vue';
import { inBrowser } from '../utils';
var supportsPassive = false;
if (inBrowser) {
    try {
        var opts = {};
        Object.defineProperty(opts, 'passive', {
            get: function () {
                supportsPassive = true;
            },
        });
        window.addEventListener('test-passive', null, opts);
        // eslint-disable-next-line no-empty
    }
    catch (e) { }
}
export function useEventListener(type, listener, options) {
    if (options === void 0) { options = {}; }
    if (!inBrowser) {
        return;
    }
    var _a = options.target, target = _a === void 0 ? window : _a, _b = options.passive, passive = _b === void 0 ? false : _b, _c = options.capture, capture = _c === void 0 ? false : _c;
    var attached;
    var add = function () {
        var element = unref(target);
        if (element && !attached) {
            element.addEventListener(type, listener, supportsPassive ? { capture: capture, passive: passive } : capture);
            attached = true;
        }
    };
    var remove = function () {
        var element = unref(target);
        if (element && attached) {
            element.removeEventListener(type, listener, capture);
            attached = false;
        }
    };
    onMounted(add);
    onActivated(add);
    onUnmounted(remove);
    onDeactivated(remove);
}
